package com.ppfly.activiti.multiinstance;import lombok.extern.slf4j.Slf4j;import org.activiti.engine.delegate.DelegateExecution;import org.activiti.engine.impl.persistence.entity.ExecutionEntity;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Arrays;import java.util.List;/** * 会签:“单票制”策略 */@Service@Transactional@Slf4jpublic class SingleDecisionStrategy implements MultiInstanceActivity {    /**     * 设置会签环节审核人员     *     * @param execution     * @return     */    @Override    public List<String> resolveUsersForTask(DelegateExecution execution) {        //流程定义Key        String processDefinitionKey = ((ExecutionEntity) execution).getProcessDefinitionKey();        //环节Id        String activityId = execution.getCurrentActivityId();        //todo 查库        log.info("流程：{}, 环节：{} 设置会签环节的人员...", processDefinitionKey, activityId);        List<String> assigneeList = Arrays.asList("zhangsan", "lisi", "wangwu");        return assigneeList;    }    /**     * 每次实例结束时计算的表达式     *     * @param execution     * @return     */    @Override    public boolean isComplete(DelegateExecution execution) {        //实例总数        int nrOfInstances = (int) execution.getVariable("nrOfInstances");        //当前活动的数量，即尚未完成的实例。对于串审，这将始终为1        int nrOfActiveInstances = (int) execution.getVariable("nrOfActiveInstances");        //已完成的实例的数量。        int nrOfCompletedInstances = (int) execution.getVariable("nrOfCompletedInstances");        log.info("总的会签任务数量：{};\t当前活动的会签任务数量:{};\t已经完成的会签任务数量:{}", nrOfInstances, nrOfActiveInstances, nrOfCompletedInstances);        if (nrOfCompletedInstances >= 1) {            //单票制(单一人审)策略            return true;        }        return false;    }}